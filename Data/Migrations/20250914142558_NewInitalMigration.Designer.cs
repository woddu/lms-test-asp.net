// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using lms_test1.Data;

#nullable disable

namespace lms_test1.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250914142558_NewInitalMigration")]
    partial class NewInitalMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SectionTeacherSubject", b =>
                {
                    b.Property<int>("SectionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherSubjectsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SectionsId", "TeacherSubjectsId");

                    b.HasIndex("TeacherSubjectsId");

                    b.ToTable("TeacherSubjectSections", (string)null);
                });

            modelBuilder.Entity("lms_test1.Areas.Identity.Data.LMSUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Verified")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("lms_test1.Models.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Exam")
                        .HasColumnType("REAL");

                    b.Property<double>("PT1")
                        .HasColumnType("REAL");

                    b.Property<double>("PT10")
                        .HasColumnType("REAL");

                    b.Property<double>("PT2")
                        .HasColumnType("REAL");

                    b.Property<double>("PT3")
                        .HasColumnType("REAL");

                    b.Property<double>("PT4")
                        .HasColumnType("REAL");

                    b.Property<double>("PT5")
                        .HasColumnType("REAL");

                    b.Property<double>("PT6")
                        .HasColumnType("REAL");

                    b.Property<double>("PT7")
                        .HasColumnType("REAL");

                    b.Property<double>("PT8")
                        .HasColumnType("REAL");

                    b.Property<double>("PT9")
                        .HasColumnType("REAL");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeacherSubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WW1")
                        .HasColumnType("REAL");

                    b.Property<double>("WW10")
                        .HasColumnType("REAL");

                    b.Property<double>("WW2")
                        .HasColumnType("REAL");

                    b.Property<double>("WW3")
                        .HasColumnType("REAL");

                    b.Property<double>("WW4")
                        .HasColumnType("REAL");

                    b.Property<double>("WW5")
                        .HasColumnType("REAL");

                    b.Property<double>("WW6")
                        .HasColumnType("REAL");

                    b.Property<double>("WW7")
                        .HasColumnType("REAL");

                    b.Property<double>("WW8")
                        .HasColumnType("REAL");

                    b.Property<double>("WW9")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherSubjectId");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("lms_test1.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdviserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Strand")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("YearLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AdviserId")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("lms_test1.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<char>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("SectionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("lms_test1.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Track")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("lms_test1.Models.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Exam")
                        .HasColumnType("REAL");

                    b.Property<double>("PT1")
                        .HasColumnType("REAL");

                    b.Property<double>("PT10")
                        .HasColumnType("REAL");

                    b.Property<double>("PT2")
                        .HasColumnType("REAL");

                    b.Property<double>("PT3")
                        .HasColumnType("REAL");

                    b.Property<double>("PT4")
                        .HasColumnType("REAL");

                    b.Property<double>("PT5")
                        .HasColumnType("REAL");

                    b.Property<double>("PT6")
                        .HasColumnType("REAL");

                    b.Property<double>("PT7")
                        .HasColumnType("REAL");

                    b.Property<double>("PT8")
                        .HasColumnType("REAL");

                    b.Property<double>("PT9")
                        .HasColumnType("REAL");

                    b.Property<int>("SubjectId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeacherId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("WW1")
                        .HasColumnType("REAL");

                    b.Property<double>("WW10")
                        .HasColumnType("REAL");

                    b.Property<double>("WW2")
                        .HasColumnType("REAL");

                    b.Property<double>("WW3")
                        .HasColumnType("REAL");

                    b.Property<double>("WW4")
                        .HasColumnType("REAL");

                    b.Property<double>("WW5")
                        .HasColumnType("REAL");

                    b.Property<double>("WW6")
                        .HasColumnType("REAL");

                    b.Property<double>("WW7")
                        .HasColumnType("REAL");

                    b.Property<double>("WW8")
                        .HasColumnType("REAL");

                    b.Property<double>("WW9")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("lms_test1.Areas.Identity.Data.LMSUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("lms_test1.Areas.Identity.Data.LMSUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms_test1.Areas.Identity.Data.LMSUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("lms_test1.Areas.Identity.Data.LMSUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SectionTeacherSubject", b =>
                {
                    b.HasOne("lms_test1.Models.Section", null)
                        .WithMany()
                        .HasForeignKey("SectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms_test1.Models.TeacherSubject", null)
                        .WithMany()
                        .HasForeignKey("TeacherSubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("lms_test1.Models.Score", b =>
                {
                    b.HasOne("lms_test1.Models.Student", "Student")
                        .WithMany("Scores")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms_test1.Models.TeacherSubject", "TeacherSubject")
                        .WithMany("Scores")
                        .HasForeignKey("TeacherSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("TeacherSubject");
                });

            modelBuilder.Entity("lms_test1.Models.Section", b =>
                {
                    b.HasOne("lms_test1.Areas.Identity.Data.LMSUser", "Adviser")
                        .WithOne("AdvisorySection")
                        .HasForeignKey("lms_test1.Models.Section", "AdviserId");

                    b.Navigation("Adviser");
                });

            modelBuilder.Entity("lms_test1.Models.Student", b =>
                {
                    b.HasOne("lms_test1.Models.Section", "Section")
                        .WithMany("Students")
                        .HasForeignKey("SectionId");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("lms_test1.Models.TeacherSubject", b =>
                {
                    b.HasOne("lms_test1.Models.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("lms_test1.Areas.Identity.Data.LMSUser", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("lms_test1.Areas.Identity.Data.LMSUser", b =>
                {
                    b.Navigation("AdvisorySection");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("lms_test1.Models.Section", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("lms_test1.Models.Student", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("lms_test1.Models.Subject", b =>
                {
                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("lms_test1.Models.TeacherSubject", b =>
                {
                    b.Navigation("Scores");
                });
#pragma warning restore 612, 618
        }
    }
}
