@model lms_test1.Models.ViewModels.Grade.StudentScoresViewModel

@{
    ViewData["Title"] = "Scores of " + Model.Student.LastName + ", " + Model.Student.FirstName;
    int wwcount_First = 0;
    int wwcount_Second = 0;
    int ptcount_First = 0;
    int ptcount_Second = 0;

    for (int i = 1; i <= 10; i++)
    {
        foreach (var prop in Model.TeacherSubject.GetType().GetProperties())
        {            
            if (prop.Name == $"WW{i}_First")
            {
                if((double)prop.GetValue(Model.TeacherSubject)! != 0)
                {
                    wwcount_First++;
                }
            } 
            if (prop.Name == $"WW{i}_Second")
            {
                if((double)prop.GetValue(Model.TeacherSubject)! != 0)
                {
                    wwcount_Second++;
                }
            } 
            if (prop.Name == $"PT{i}_First")
            {
                if((double)prop.GetValue(Model.TeacherSubject)! != 0)
                {
                    ptcount_First++; 
                }
            } 
            if (prop.Name == $"PT{i}_Second")
            {
                if((double)prop.GetValue(Model.TeacherSubject)! != 0)
                {
                    ptcount_Second++;
                }
            } 
        }
    }
}

@section Styles{
    <style>
        @@media (max-width: 900px){
            #saveBtn {
                position: fixed;
                bottom: 2rem;
                right: 2rem;
                font-size: 125%;
            }
        }
    </style>
}

<header>
    <div class="breadcrumbs mx-auto">
        <a asp-controller="Grades" asp-action="Index">My Subjects</a> >
        <a asp-controller="Grades" asp-action="SubjectDetails" asp-route-teacherSubjectId="@Model.TeacherSubject.Id">
            @Model.TeacherSubject.Subject.Name Details 
        </a> >
        <a asp-controller="Grades" asp-action="SectionStudents" asp-route-teacherSubjectId="@Model.TeacherSubject.Id" asp-route-sectionId="@Model.TeacherSubject.TeacherSubjectSections.First().Section.Id">
            Students in @Model.TeacherSubject.TeacherSubjectSections.First().Section.Name  
        </a> >
        <span>@ViewData["Title"]</span>
    </div>

    <h2 class="title">@ViewData["Title"] in @Model.TeacherSubject.Subject.Name</h2>
</header>

<div class="prevent-overflow px-8">
    <h1>
        1st Quarter
    </h1>

    <h3 style="margin-bottom: 1rem;">Initial Grade: @Model.StudentScore.InitialGrade_First, Final Grade: @Model.StudentScore.FinalGrade_First</h3>

    <table class="pure-table" style="margin-bottom: 1rem;">
        <thead>
            <tr>
                <th>Written Works</th>
                @if(wwcount_First == 0) { <th>None</th> }
                else
                {
                    for (int i = 1; i <= 10; i++)
                    {
                        foreach (var prop in Model.TeacherSubject.GetType().GetProperties())
                        {            
                            if (prop.Name == $"WW{i}_First" && (double)prop.GetValue(Model.TeacherSubject)! != 0)
                            {
                                <th>@prop.GetValue(Model.TeacherSubject)</th>
                            }
                        }
                    }
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Scores</td>
                @if(wwcount_First == 0) { <th>None</th> }
                else
                {
                    for (int i = 1; i <= 10; i++)
                    {
                        foreach (var prop in Model.TeacherSubject.GetType().GetProperties())
                        {
                            if (prop.Name == $"WW{i}_First" && (double)prop.GetValue(Model.TeacherSubject)! != 0)
                            {
                                foreach (var scoreProp in @Model.StudentScore.GetType().GetProperties())
                                {
                                    if (scoreProp.Name == prop.Name)
                                    {
                                        <td>
                                            <input type="number" min="0" max="@prop.GetValue(Model.TeacherSubject)"
                                                name="@scoreProp.Name" id="@scoreProp.Name" 
                                                value="@scoreProp.GetValue(Model.StudentScore)" style="width: 2rem;"/>
                                        </td>
                                    }
                                }
                            }
                        }
                    }                    
                }
            </tr>        
        </tbody>    
    </table>        
    <table class="pure-table">
        <thead>
            <tr>
                <th>Performance Tasks</th>
                @if(ptcount_First == 0) { <th>None</th> }
                else
                {
                    for (int i = 1; i <= 10; i++)
                    {
                        foreach (var prop in Model.TeacherSubject.GetType().GetProperties())
                        {            
                            if (prop.Name == $"PT{i}_First" && (double)prop.GetValue(Model.TeacherSubject)! != 0)
                            {
                                <th>@prop.GetValue(Model.TeacherSubject)</th>
                            }
                        }
                    }
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Scores</td>
                @if(ptcount_First == 0) { <th>None</th> }
                else
                {
                    for (int i = 1; i <= 10; i++)
                    {
                        foreach (var prop in Model.TeacherSubject.GetType().GetProperties())
                        {
                            if (prop.Name == $"PT{i}_First" && (double)prop.GetValue(Model.TeacherSubject)! != 0)
                            {
                                foreach (var scoreProp in @Model.StudentScore.GetType().GetProperties())
                                {
                                    if (scoreProp.Name == prop.Name)
                                    {
                                        <td>
                                            <input type="number" min="0" max="@prop.GetValue(Model.TeacherSubject)"
                                                name="@scoreProp.Name" id="@scoreProp.Name" 
                                                value="@scoreProp.GetValue(Model.StudentScore)" style="width: 2rem;"/>
                                        </td>
                                    }
                                }
                            }
                        }
                    }
                }
            </tr>        
        </tbody>    
    </table>

    <div class="pure-g">
        <div class="pure-u-3-24 pure-u-sm-2-24">
            <h3>Exam: </h3>
        </div>
        <div class="pure-u-3-24 pure-u-sm-2-24">
            <div style="display: flex; height: 100%;">
                @if (Model.TeacherSubject.Exam_First > 0)
                {        
                    <input name="Exam_First" id="Exam_First" value="@Model.StudentScore.Exam_First"
                     style="width: 2rem; margin-top: auto; margin-bottom: auto;" type="number" min="0" max="@Model.TeacherSubject.Exam_First"/>
                } 
                else
                {
                    <span style="color: #888; font-style: italic; margin-top: auto; margin-bottom: auto;">None</span>
                }   
            </div>
        </div>
    </div>

    <h1>
        2nd Quarter
    </h1>

    <h3 style="margin-bottom: 1rem;">Initial Grade: @Model.StudentScore.InitialGrade_Second, Final Grade: @Model.StudentScore.FinalGrade_Second</h3>

    <table class="pure-table" style="margin-bottom: 1rem;">
        <thead>
            <tr>
                <th>Written Works</th>
                @if(wwcount_Second == 0) { <th>None</th> }
                else
                {
                    for (int i = 1; i <= 10; i++)
                    {
                        foreach (var prop in Model.TeacherSubject.GetType().GetProperties())
                        {            
                            if (prop.Name == $"WW{i}_Second" && (double)prop.GetValue(Model.TeacherSubject)! != 0)
                            {
                                <th>@prop.GetValue(Model.TeacherSubject)</th>
                            }
                        }
                    }
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Scores</td>
                @if(wwcount_Second == 0) { <th>None</th> }
                else
                {
                    for (int i = 1; i <= 10; i++)
                    {
                        foreach (var prop in Model.TeacherSubject.GetType().GetProperties())
                        {
                            if (prop.Name == $"WW{i}_Second" && (double)prop.GetValue(Model.TeacherSubject)! != 0)
                            {
                                foreach (var scoreProp in @Model.StudentScore.GetType().GetProperties())
                                {
                                    if (scoreProp.Name == prop.Name)
                                    {
                                        <td>
                                            <input type="number" min="0" max="@prop.GetValue(Model.TeacherSubject)"
                                                name="@scoreProp.Name" id="@scoreProp.Name" 
                                                value="@scoreProp.GetValue(Model.StudentScore)" style="width: 2rem;"/>
                                        </td>
                                    }
                                }
                            }
                        }
                    }                    
                }
            </tr>        
        </tbody>    
    </table>        
    <table class="pure-table">
        <thead>
            <tr>
                <th>Performance Tasks</th>
                @if(ptcount_Second == 0) { <th>None</th> }
                else
                {
                    for (int i = 1; i <= 10; i++)
                    {
                        foreach (var prop in Model.TeacherSubject.GetType().GetProperties())
                        {            
                            if (prop.Name == $"PT{i}_Second" && (double)prop.GetValue(Model.TeacherSubject)! != 0)
                            {
                                <th>@prop.GetValue(Model.TeacherSubject)</th>
                            }
                        }
                    }
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Scores</td>
                @if(ptcount_Second == 0) { <th>None</th> }
                else
                {
                    for (int i = 1; i <= 10; i++)
                    {
                        foreach (var prop in Model.TeacherSubject.GetType().GetProperties())
                        {
                            if (prop.Name == $"PT{i}_Second" && (double)prop.GetValue(Model.TeacherSubject)! != 0)
                            {
                                foreach (var scoreProp in @Model.StudentScore.GetType().GetProperties())
                                {
                                    if (scoreProp.Name == prop.Name)
                                    {
                                        <td>
                                            <input type="number" min="0" max="@prop.GetValue(Model.TeacherSubject)"
                                                name="@scoreProp.Name" id="@scoreProp.Name" 
                                                value="@scoreProp.GetValue(Model.StudentScore)" style="width: 2rem;"/>
                                        </td>
                                    }
                                }
                            }
                        }
                    }
                }
            </tr>        
        </tbody>    
    </table>

    <div class="pure-g">
        <div class="pure-u-3-24 pure-u-sm-2-24">
            <h3>Exam: </h3>
        </div>
        <div class="pure-u-3-24 pure-u-sm-2-24">
            <div style="display: flex; height: 100%;">
                @if (Model.TeacherSubject.Exam_Second > 0)
                {        
                    <input name="Exam_Second" id="Exam_Second" value="@Model.StudentScore.Exam_Second"
                     style="width: 2rem; margin-top: auto; margin-bottom: auto;" type="number" min="0" max="@Model.TeacherSubject.Exam_Second"/>
                } 
                else
                {
                    <span style="color: #888; font-style: italic; margin-top: auto; margin-bottom: auto;">None</span>
                }   
            </div>
        </div>
    </div>    

    <button id="saveBtn" disabled class="pure-button pure-button-primary" style="margin-top: 1rem;">
        Save Changes
    </button>
    <form id="scoresForm" style="display: hidden;">
        @Html.AntiForgeryToken()
    </form>   
</div>

@section Scripts{
    <script>
        $(document).on("input", "input[type=number]", function () {
            var max = parseFloat($(this).attr("max"));
            var min = parseFloat($(this).attr("min"));
            var val = parseFloat($(this).val());

            if (!isNaN(max) && val > max) {
                $(this).val(max); // silently clamp to max
            }
            if (!isNaN(min) && val < min) {
                $(this).val(min); // silently clamp to min
            }
        });

        const tsmodel = @Html.Raw(Json.Serialize(Model.TeacherSubject));

        const model = @Html.Raw(Json.Serialize(Model.StudentScore));

        function hasChanges() {
            let changed = false;
            $("input[type='number']").each(function () {
                const fieldName = this.name; // matches asp-for property
                const currentValue = this.value;
                const originalValue = model[fieldName.charAt(0).toLowerCase() + fieldName.slice(1)];
                    
                // normalize null/undefined and string vs number
                if (currentValue !== String(originalValue ?? "")) {                    
                    changed = true;
                    return false; // break loop
                }
            });
            return changed;
        } 

        // Enable save button only if something changed
        $("input[type='number']").on("input", function () {
            if (hasChanges()) {
                $("#saveBtn").prop("disabled", false);
            } else {
                $("#saveBtn").prop("disabled", true);
            }
        });

        // Warn before leaving if there are changes
        $(window).on("beforeunload", function () {
            if (hasChanges()) {
                return "You have unsaved changes!";
            }
        });

        function getChangedFields() {
            const changes = {};
            let error = false;
            $("input[type='number']").each(function () {
                const fieldName = this.name;
                const currentValue = this.value;
                const originalValue = model[fieldName.charAt(0).toLowerCase() + fieldName.slice(1)];
                const highestValue = tsmodel[fieldName.charAt(0).toLowerCase() + fieldName.slice(1)];

                if (currentValue !== String(originalValue ?? "")) {                    
                    if (Number(currentValue) > Number(highestValue)) {                        
                        $(this).css("border", "1px solid red");       
                        $(this).focus().css("outline", "1px solid red").focus();                                         
                        $("#saveBtn").prop("disabled", true);
                        error = true;
                        return;
                    }
                    changes[fieldName.charAt(0).toLowerCase() + fieldName.slice(1)] = currentValue;
                }
            });
            return { changes, error };
        }

        $("#saveBtn").click(function (e) {
            e.preventDefault();

            const { changes, error } = getChangedFields();

            if (error) return;

            Object.keys(changes).forEach(key => {
                model[key] = changes[key];
            });

            var token = $('input[name="__RequestVerificationToken"]').val();

            $.ajax({
                url: '@Url.Action("SaveStudentScoresChanges", "Grades")',
                type: 'POST',
                contentType: 'application/json',
                headers: { 'RequestVerificationToken': token },
                data: JSON.stringify(model),
                success: function (response) {   

                    if (response.redirectUrl) {
                        window.location.href = response.redirectUrl;
                    }
                    // reset initial values so button disables again
                    $("#saveBtn").prop("disabled", true);
                },
                error: function (xhr) {
                    alert("Error saving changes: " + xhr.responseText);
                }
            });
        });
    </script>
}