@model lms_test1.Models.Student

@{
    ViewData["Title"] = "Edit Student";
}

<header>
    <div class="breadcrumbs">
        <a asp-area="" asp-controller="Student" asp-action="Index">Student Management</a> > <a href="#0/">@ViewData["Title"]</a>
    </div>
    <h2 class="title">@ViewData["Title"] - @Model.LastName, @Model.FirstName</h2>
</header>

<div class="prevent-overflow px-8">
    <form class="pure-form pure-form-stacked" asp-action="Edit">
        <fieldset>
            <legend>
                <a asp-action="Index">Back to List</a>
            </legend>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="pure-g">
                <div class="pure-u-1 pure-u-md-1-3">
                    <label asp-for="LastName"></label>
                    <input asp-for="LastName" class="pure-u-23-24" />
                    <span asp-validation-for="LastName" class="text-danger"></span>
                </div>
                <div class="pure-u-1 pure-u-md-1-3">
                    <label asp-for="FirstName"></label>
                    <input asp-for="FirstName" class="pure-u-23-24" />
                    <span asp-validation-for="FirstName" class="text-danger"></span>
                </div>
                <div class="pure-u-1 pure-u-md-1-3">
                    <label asp-for="MiddleName"></label>
                    <input asp-for="MiddleName" class="pure-u-23-24" />
                    <span asp-validation-for="MiddleName" class="text-danger"></span>
                </div>
                <div class="pure-u-1 pure-u-md-1-3">
                    <label asp-for="Gender"></label>
                    <select asp-for="Gender" class="pure-u-23-24">
                        @foreach (var gender in (List<(string label, char value)>)ViewData["Gender"])
                        {
                            <option value="@gender.value">@gender.label</option>
                        }   
                    </select>
                    <span asp-validation-for="Gender" class="text-danger"></span>
                </div>
                <div class="pure-u-1 pure-u-md-1-3">
                    <label asp-for="Age"></label>
                    <input asp-for="Age" class="pure-u-23-24" />
                    <span asp-validation-for="Age" class="text-danger"></span>
                </div>
                <div class="pure-u-1 pure-u-md-1-3">
                    <label asp-for="BirthDate"></label>
                    <input asp-for="BirthDate" class="pure-u-23-24" />
                    <span asp-validation-for="BirthDate" class="text-danger"></span>
                </div>
                <div class="pure-u-1 pure-u-md-1-3">
                    <label asp-for="Address"></label>
                    <input asp-for="Address" class="pure-u-23-24" />
                    <span asp-validation-for="Address" class="text-danger"></span>
                </div>
                <div class="pure-u-1 pure-u-md-1-3">
                    <label asp-for="SectionId">Section</label>
                    <select asp-for="SectionId" class="pure-u-23-24">
                        @foreach (var group in (IEnumerable<IGrouping<int, lms_test1.Models.Section>>)ViewData["SectionId"])
                        {
                            <optgroup label="Grade @group.Key">
                                @foreach (var Section in group)
                                {
                                    <option value="@Section.Id">
                                        @Section.Name
                                    </option>
                                }
                            </optgroup>
                        }
                    </select>
                    <span asp-validation-for="SectionId" class="text-danger"></span>
                </div>
            </div>
            <div style="margin-top: 1rem;">
                <button type="submit" id="submitBtn" class="pure-button pure-button-primary">Save</button>
            </div>
        </fieldset>
    </form>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.querySelector("form");
        const submitBtn = document.getElementById("submitBtn");

        // Capture initial state
        const initialState = new FormData(form);
        const initialValues = Object.fromEntries(initialState.entries());

        // Helper to compare current state
        function hasFormChanged() {
            const currentState = new FormData(form);
            const currentValues = Object.fromEntries(currentState.entries());

            return Object.keys(initialValues).some(key => {
                return initialValues[key] !== currentValues[key];
            });
        }

        // Listen for input changes
        form.addEventListener("input", () => {
            submitBtn.disabled = !hasFormChanged();
        });

        // Also listen for select and checkbox changes
        form.addEventListener("change", () => {
            submitBtn.disabled = !hasFormChanged();
        });
    });
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
